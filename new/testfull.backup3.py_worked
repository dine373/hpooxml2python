from shutil import copyfile
import inspect
import xml.etree.ElementTree as ET
filename='copy_fulladd.xml'
tree = ET.parse(filename)
root = tree.getroot()
global successid, failureid, copyid, copy2id,startstep
i = 0; r =0; s = {}

print filename
print "------------------"
startstep = root.find('startSteps').text
print "Starting Step id of the process : \t",startstep
print "----------------------------------------------------------------------------"


# Print No of Steps and Return steps in the Process

for steps in root.iter('steps'):
 print "SNo",'\t'," StepName",'\t', "ID"
 for step in steps.iter('step'):
  i = i+1;
  print i,'\t',step.find('name').text,'\t',step.get('id')
 print "\nTotal No of Steps :" , i
 print "---------------------------------------------------------------------------- \n"
# print step.find('transitions').find('transition').find('name').text  ---> didnt work since transition has two items( failure, success). If it has one then it will work.
# print "------------------------------------------------------------------------------\n"
 print "SNo", '\t', "ReturnStepName", '\t',"ID"
 for returnstep in steps.iter('returnStep'):
  r = r+1 
  print r,'\t',returnstep.find('returnStepType').text,'\t', returnstep.get('id')
#print returnstep.find('transitions').find('transition').find('name').text
 print "\nTotal No of ReturnSteps :" , r
print "-----------------------------------------------------------------------------\n\n\n\n\n"


#Collect All Id's in a dict
for steps in root.iter('steps'):
 for step in steps.iter('step'):
  id = step.get('id')
  fun = id[:4]
  s[fun] = id
 for returnstep in steps.iter('returnStep'):
  id = returnstep.get('id')
  fun = id[:4]
  s[fun] = id

"""
All ID Values are collected in S() with keypair: function name (four char) and id 
print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
for j in s:
 print j, s[j]
print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
"""




#Defining all functions for each step and return step with function name as first four characters of their id

def d7e7():
 for returnstep in steps.iter('returnStep'):
  if(returnstep.find('returnStepType').text == 'RESOLVED'):
    successid = returnstep.get('id')
    print "Success Step"
    dest = returnstep.find('transitions').find('transition').find('destination').find('refId').text
    source = returnstep.find('transitions').find('transition').find('source').find('refId').text
    if ( source == dest):
      print "Process done"

def d299():
 for returnstep in steps.iter('returnStep'):
  if(returnstep.find('returnStepType').text == 'ERROR'):
   failureid = returnstep.get('id')
   print "Failure Step"
   dest = returnstep.find('transitions').find('transition').find('destination').find('refId').text
   source = returnstep.find('transitions').find('transition').find('source').find('refId').text
   if (source == dest):
     print "Process Failed"

def fdaf():
 for step in steps.iter('step'):
  if (step.find('name').text == 'FS Copy'):
   print "Step No 1 - FS Copy"
   copyid = step.get('id')
   #s.append(copyid)
   #fun = inspect.stack()[0][3]
   #s[copyid] = fun
   #print "Copy Step id is (copyid):", copyid, "\ntestttttttttttttt", inspect.stack()[0][3], name
  # for trans in step.iter('transitions'):
   for tran in step.iter('transition'):
    if(tran.find('name').text == 'success'):
     nextprocess = tran.find('destination').find('refId').text
     for j in s:
      if(s[j] == nextprocess):
       eval(s[j][:4]+'()')
    if(tran.find('name').text == 'failure'):
     nextprocess = tran.find('destination').find('refId').text
     for j in s:
      if(s[j] == nextprocess):
        eval(s[j][:4]+'()')
"""
def d72():
 for step in steps.iter('step'):
  if(step.find('name').text == 'FSCopy2'):
  # global copy2id
   print "second step - copy"
   copy2id = step.get('id')
   #s.append(copy2id)
   name = step.find('name').text
   fun = inspect.stack()[0][3]
   #s[copy2id] = fun
   print "Copy 2 Step id is (copy2id): ", copy2id,  "\n", inspect.stack()[0][3]
   for tran in step.iter('transition'):
    if(tran.find('name').text == 'failure'):
      a=tran.find('destination')
      print a.find('refId').text

"""

# Starting the Process 

for j in s:
 if(s[j] == startstep):
  eval(s[j][:4]+'()')
